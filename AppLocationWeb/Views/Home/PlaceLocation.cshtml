<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin="" />
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin=""></script>

@{
    ViewData["Title"] = "Map";

}

<div class="text-center">
    <h1 class="display-4">Mapa</h1>
    <p>Quieres buscar algo?</p>
    <input type="text" class="form-control" id="inputBusqueda" placeholder="Que estamos buscando?">
    <button class="btn btn-primary" id="buscarBtn" onclick="searchLocations()">Buscar</button>
</div>
<div id="map"></div>

<script>

    var currentLatitude;
    var currentLongitude;
    var globalMap;
    var allMarkers = [];
    var selectedlat;
    var selectedlng;
    var selectedData;


    function initMap() {
        var map = L.map('map').setView([19.4326, -99.1332], 13);
        globalMap = map;

        L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
            attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
        }).addTo(map);

        // Aquí puedes agregar tus marcadores y funcionalidades adicionales.

        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                currentLatitude = position.coords.latitude;
                currentLongitude = position.coords.longitude;
                var myLocation = L.marker([currentLatitude, currentLongitude]).addTo(map);
                myLocation.bindPopup("<b>Estás aquí</b>").openPopup();
                map.setView([currentLatitude, currentLongitude], 15);
            });
        } else {
            alert("Lo siento, tu navegador no admite la geolocalización.");
        }
        

    }

    async function placeSearchCallback(input,ll) {
        try {

            for (var i = 0; i < allMarkers.length; i++) {
                globalMap.removeLayer(allMarkers[i]);
            }

            let searchResults = await placeSearch(input, ll);
            let { results } = searchResults;

            results.forEach(result => {
                let { name, location } = result;
                let { address, cross_street, locality, formatted_address, country } = location;
                let { latitude, longitude } = result.geocodes.main;
                let marker = L.marker([latitude, longitude]).addTo(globalMap);
                allMarkers.push(marker);
                globalMap.addLayer(marker);
                marker.bindPopup(`<b>${name}</b><br><br>${address} ${cross_street}, ${locality}, ${formatted_address}, ${country}`);

                
            });
        } catch (err) {
            console.error(err);
        }
    }

    async function placeSearch(input,ll) {

        try {
            const searchParams = new URLSearchParams({
                query: input,
                ll: ll,
                open_now: 'true',
                sort: 'DISTANCE'
            });
            const results = await fetch(
                `https://api.foursquare.com/v3/places/search?${searchParams}`,
                {
                    method: 'GET',
                    headers: {
                        Accept: 'application/json',
                        Authorization: 'fsq3WrG+/PGBTdjVwCHiQJ/fIQB92ShDBPc7BdLM9jLNWyE=',
                    }
                }
            );
            const data = await results.json();
            return data;
        } catch (err) {
            console.error(err);
        }
    }

    document.addEventListener('DOMContentLoaded', initMap);

    function searchLocations() {
        //aqui cargamos toda la data necesaria.
        let datoInput = document.getElementById('inputBusqueda').value;
        let laString = currentLatitude.toString();
        let loString = currentLongitude.toString();
        let ll = laString + ',' + loString;
        placeSearchCallback(datoInput, ll);
        for (var i = 0; i < allMarkers.length; i++) {
            allMarkers[i].on('click', onMarkerClick);
        }
        console.log(datoInput);
    }
    function onMarkerClick(e) {
        // 'this' en este contexto es el marcador que fue clickeado
         selectedlat = this.getLatLng().lat;
         selectedlng = this.getLatLng().lng;
         selectedData = this.options.anyOtherData;

        // Ahora puedes enviar esta información al controlador
        // Puedes utilizar una solicitud AJAX o cualquier otra técnica que prefieras
        // ...
    }

    const options = {
        method: 'GET',
        headers: {
            accept: 'application/json',
            Authorization: 'fsq3WrG+/PGBTdjVwCHiQJ/fIQB92ShDBPc7BdLM9jLNWyE='
        }
    };

    fetch('https://api.foursquare.com/v3/places/4bb687ee2f70c9b6c0978530/photos', options)
        .then(response => response.json())
        .then(response => console.log(response))
        .catch(err => console.error(err));


</script>
